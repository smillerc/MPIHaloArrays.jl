var documenterSearchIndex = {"docs":
[{"location":"mpihaloarray/#MPIHaloArray","page":"MPIHaloArray","title":"MPIHaloArray","text":"","category":"section"},{"location":"mpihaloarray/","page":"MPIHaloArray","title":"MPIHaloArray","text":"This is an example","category":"page"},{"location":"mpihaloarray/","page":"MPIHaloArray","title":"MPIHaloArray","text":"MPIHaloArrays.MPIHaloArray\nMPIHaloArrays.fillhalo!\nMPIHaloArrays.filldomain!","category":"page"},{"location":"mpihaloarray/#MPIHaloArrays.MPIHaloArray","page":"MPIHaloArray","title":"MPIHaloArrays.MPIHaloArray","text":"MPIHaloArray\n\nFields\n\ndata: AbstractArray{T,N} - contains the local data on the current rank\npartitioning: partitioning datatype\ncomm: MPI communicator\nwindow: MPI window\nneighbor_ranks : Vector{Int} - IDs of the neighboring arrays/MPI procs\ncoords : Vector{Int} - Coordinates in the global MPI space\nrank: Current MPI rank\n\n\n\n\n\n","category":"type"},{"location":"topology/#ParallelTopology","page":"Topology","title":"ParallelTopology","text":"","category":"section"},{"location":"topology/","page":"Topology","title":"Topology","text":"Parallel topology sets up the neighbors","category":"page"},{"location":"topology/","page":"Topology","title":"Topology","text":"MPIHaloArrays.ParallelTopology\nMPIHaloArrays.CartesianTopology","category":"page"},{"location":"topology/#MPIHaloArrays.ParallelTopology","page":"Topology","title":"MPIHaloArrays.ParallelTopology","text":"An abstract ParallelTopology type that is extended by either a CartesianTopology or GraphTopology (future)\n\n\n\n\n\n","category":"type"},{"location":"topology/#MPIHaloArrays.CartesianTopology","page":"Topology","title":"MPIHaloArrays.CartesianTopology","text":"CartesianTopology\n\nThe CartesianTopology type holds neighbor information, current rank, etc.\n\nFields\n\ncomm: MPI commicator object\nnprocs: Number of total processors (global)\nrank: Current rank\ncoords: Coordinates in the global space, i.e. (0,1,1)\nglobal_dims: Dimensions of the global domain, i.e. (4,4) is a 4x4 global domain\nisperiodic: Vector{Bool}; Perodicity of each dimension, i.e. (false, true, true) means y and z are periodic\nneighbors: OffsetArray{Int}; Neighbor ranks (including corners), indexed as [[ilo, center, ihi], i, j, k]\n\n\n\n\n\n","category":"type"},{"location":"examples/02-halo2d/#D-Halo-Example","page":"2D Halo Example","title":"2D Halo Example","text":"","category":"section"},{"location":"examples/02-halo2d/","page":"2D Halo Example","title":"2D Halo Example","text":"# examples/02-halo2d.jl\nusing MPI, MPIHaloArrays\n\nMPI.Init()\nconst comm = MPI.COMM_WORLD\nconst rank = MPI.Comm_rank(comm)\nconst nprocs = MPI.Comm_size(comm)\n\n@assert nprocs == 8 \"This example is designed with 8 processes...\"\n\ntopology = CartesianTopology([4,2], [false, false])\n\n# nhalo = 2\n# ni = 6\n# nj = 5\n\n# data = rank_data(ni, nj, rank)\n# A = MPIHaloArray(data, topology, nhalo)\n# fillhalo!(A, -1)\n\n# updatehalo!(A)\n\nGC.gc()\nMPI.Finalize()","category":"page"},{"location":"examples/02-halo2d/","page":"2D Halo Example","title":"2D Halo Example","text":"> mpiexecjl -n 8 julia examples/02-halo2d.jl","category":"page"},{"location":"examples/03-halo3d/#D-Halo-Example","page":"3D Halo Example","title":"3D Halo Example","text":"","category":"section"},{"location":"examples/03-halo3d/","page":"3D Halo Example","title":"3D Halo Example","text":"# examples/03-halo3d.jl\nusing MPI, MPIHaloArrays\n\nMPI.Init()\nconst comm = MPI.COMM_WORLD\nconst rank = MPI.Comm_rank(comm)\nconst nprocs = MPI.Comm_size(comm)\n\n@assert nprocs == 8 \"This example is designed with 8 processes...\"\n\ntopology = CartesianTopology([2,2,2], [false, false, true])\n\n# nhalo = 2\n# ni = 6\n# nj = 5\n\n# data = rank_data(ni, nj, rank)\n# A = MPIHaloArray(data, topology, nhalo)\n# fillhalo!(A, -1)\n\n# updatehalo!(A)\n\nGC.gc()\nMPI.Finalize()","category":"page"},{"location":"examples/03-halo3d/","page":"3D Halo Example","title":"3D Halo Example","text":"> mpiexecjl -n 8 julia examples/03-halo3d.jl","category":"page"},{"location":"#MPIHaloArrays","page":"MPIHaloArrays.jl","title":"MPIHaloArrays","text":"","category":"section"},{"location":"","page":"MPIHaloArrays.jl","title":"MPIHaloArrays.jl","text":"A high-level array type to help with halo, or ghost-cell exchanges commonly found in large-scale PDE problems. Very similar in goals and design to MPIArrays.jl and ImplicitGlobalGrid.jl.","category":"page"},{"location":"","page":"MPIHaloArrays.jl","title":"MPIHaloArrays.jl","text":"using MPI, MPIHaloArrays\n\nMPI.Init()\n\n# Create the MPI topology, which here is a Cartesian 4x4 domain (using 16 cores)\ntopo = CartesianTopology([4,4], [true, true])\nrank = MPI.Comm_rank(MPI.COMM_WORLD)\n\n# How many halo cells in each dimension (fixed for all dimensions)\nnhalo = 2\nN = 200\n\nlocal_data = rand(N,N) # does not include halo cells\nx = MPIHaloArray{Float64}(local_data,topo,nhalo)\n\nupdatehalo!(x)\n\nGC.gc()\nMPI.Finalize()","category":"page"},{"location":"examples/01-halo1d/#D-Halo-Example","page":"1D Halo Example","title":"1D Halo Example","text":"","category":"section"},{"location":"examples/01-halo1d/","page":"1D Halo Example","title":"1D Halo Example","text":"# examples/01-halo1d.jl\nusing MPI, MPIHaloArrays\n\nMPI.Init()\nconst comm = MPI.COMM_WORLD\nconst rank = MPI.Comm_rank(comm)\nconst nprocs = MPI.Comm_size(comm)\n\n@assert nprocs == 8 \"This example is designed with 8 processes...\"\n\nfunction print_haloarray(A)\n    for p in 0:nprocs-1\n        if rank == p\n            println(\"Rank $(p): $(A)\")\n        end\n        MPI.Barrier(comm)\n    end\nend\n\ntopology = CartesianTopology(8, false)\n\nnhalo = 2\nni = 8\ndata = collect(1:ni) * (rank + 10)\nA = MPIHaloArray(data, topology, nhalo)\nfillhalo!(A, -1)\n\nif rank == 0 println(\"Before Sync\") end\nprint_haloarray(A)\n\nupdatehalo!(A)\n\nif rank == 0 println(\"\\nAfter Sync\") end\nprint_haloarray(A)\n\nif rank == 0 println(\"Note that the low boundary on 0 and high boundary on 7 are -1 (non-periodic)\") end\nGC.gc()\nMPI.Finalize()","category":"page"},{"location":"examples/01-halo1d/","page":"1D Halo Example","title":"1D Halo Example","text":"> mpiexecjl -n 8 julia examples/01-halo1d.jl\nBefore Sync\nRank 0: [-1, -1, 10, 20, 30, 40, 50, 60, 70, 80, -1, -1]\nRank 1: [-1, -1, 11, 22, 33, 44, 55, 66, 77, 88, -1, -1]\nRank 2: [-1, -1, 12, 24, 36, 48, 60, 72, 84, 96, -1, -1]\nRank 3: [-1, -1, 13, 26, 39, 52, 65, 78, 91, 104, -1, -1]\nRank 4: [-1, -1, 14, 28, 42, 56, 70, 84, 98, 112, -1, -1]\nRank 5: [-1, -1, 15, 30, 45, 60, 75, 90, 105, 120, -1, -1]\nRank 6: [-1, -1, 16, 32, 48, 64, 80, 96, 112, 128, -1, -1]\nRank 7: [-1, -1, 17, 34, 51, 68, 85, 102, 119, 136, -1, -1]\n\nAfter Sync\nRank 0: [-1, -1, 10, 20, 30, 40, 50, 60, 70, 80, 11, 22]\nRank 1: [70, 80, 11, 22, 33, 44, 55, 66, 77, 88, 12, 24]\nRank 2: [77, 88, 12, 24, 36, 48, 60, 72, 84, 96, 13, 26]\nRank 3: [84, 96, 13, 26, 39, 52, 65, 78, 91, 104, 14, 28]\nRank 4: [91, 104, 14, 28, 42, 56, 70, 84, 98, 112, 15, 30]\nRank 5: [98, 112, 15, 30, 45, 60, 75, 90, 105, 120, 16, 32]\nRank 6: [105, 120, 16, 32, 48, 64, 80, 96, 112, 128, 17, 34]\nRank 7: [112, 128, 17, 34, 51, 68, 85, 102, 119, 136, -1, -1]\nNote that the low boundary on 0 and high boundary on 7 are -1 (non-periodic)","category":"page"}]
}
